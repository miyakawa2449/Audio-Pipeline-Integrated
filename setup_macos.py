#!/usr/bin/env python3
"""
macOSÂ∞ÇÁî® Audio Pipeline Integrated „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà
MacBook Pro M4 Pro Áµ±ÂêàÁí∞Â¢ÉÊßãÁØâ
"""
import os
import sys
import json
import platform
import subprocess
import shutil
from pathlib import Path

class MacOSSetup:
    """macOSÁî®„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÇØ„É©„Çπ"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.is_apple_silicon = self._detect_apple_silicon()
        self.setup_log = []
        
    def _detect_apple_silicon(self):
        """Apple SiliconÊ§úÂá∫"""
        if platform.system() != 'Darwin':
            return False
        try:
            result = subprocess.run(['sysctl', '-n', 'machdep.cpu.brand_string'], 
                                  capture_output=True, text=True)
            return 'Apple' in result.stdout
        except:
            return False
    
    def log(self, message, level="INFO"):
        """„É≠„Ç∞Ë®òÈå≤"""
        log_entry = f"[{level}] {message}"
        self.setup_log.append(log_entry)
        
        if level == "ERROR":
            print(f"‚ùå {message}")
        elif level == "WARNING":
            print(f"‚ö†Ô∏è {message}")
        elif level == "SUCCESS":
            print(f"‚úÖ {message}")
        else:
            print(f"üîç {message}")
    
    def check_prerequisites(self):
        """ÂâçÊèêÊù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ"""
        self.log("ÂâçÊèêÊù°‰ª∂„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...")
        
        # macOSÁ¢∫Ë™ç
        if platform.system() != 'Darwin':
            self.log("„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØmacOSÂ∞ÇÁî®„Åß„Åô", "ERROR")
            return False
        
        macos_version = platform.mac_ver()[0]
        self.log(f"macOS {macos_version} Ê§úÂá∫", "SUCCESS")
        
        # Apple SiliconÁ¢∫Ë™ç
        if self.is_apple_silicon:
            self.log("Apple Silicon CPUÊ§úÂá∫ - ÊúÄÈÅ©ÂåñÊúâÂäπ", "SUCCESS")
        else:
            self.log("Intel MacÊ§úÂá∫", "INFO")
        
        return True
    
    def setup_directories(self):
        """ÂøÖË¶Å„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„Çí‰ΩúÊàê"""
        self.log("„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„Çí‰ΩúÊàê‰∏≠...")
        
        directories = [
            # Ë®≠ÂÆö„Éª„É≠„Ç∞
            "config",
            "logs",
            
            # Python_Audio_dataset
            "Python_Audio_dataset/dataset/audio_files",
            "Python_Audio_dataset/dataset/meta_files",
            "Python_Audio_dataset/dataset/processed",
            "Python_Audio_dataset/dataset/backup",
            "Python_Audio_dataset/data",
            
            # AudioOpt
            "AudioOpt/dataset/audio_files",
            "AudioOpt/dataset/meta_files", 
            "AudioOpt/dataset/processed",
            "AudioOpt/models",
            "AudioOpt/output",
            
            # shared_dataset
            "shared_dataset/audio_files",
            "shared_dataset/meta_files",
            "shared_dataset/processed",
            "shared_dataset/phoneme_data",
            "shared_dataset/backup",
            "shared_dataset/logs",
        ]
        
        created_count = 0
        for directory in directories:
            dir_path = self.project_root / directory
            if not dir_path.exists():
                dir_path.mkdir(parents=True, exist_ok=True)
                created_count += 1
        
        self.log(f"{created_count} ÂÄã„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê", "SUCCESS")
        return True
    
    def create_macos_config(self):
        """macOSÊúÄÈÅ©ÂåñË®≠ÂÆö„Éï„Ç°„Ç§„É´‰ΩúÊàê"""
        self.log("macOSË®≠ÂÆö„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê‰∏≠...")
        
        # Âü∫Êú¨Ë®≠ÂÆö
        config = {
            "system": {
                "platform": "macos",
                "apple_silicon": self.is_apple_silicon,
                "optimization_level": "high" if self.is_apple_silicon else "medium"
            },
            "audio": {
                "core_audio": True,
                "sample_rate": 48000,
                "bit_depth": 24,
                "channels": 1,
                "buffer_size": 512,
                "low_latency": True
            },
            "processing": {
                "use_mps": self.is_apple_silicon,
                "batch_size": 8 if self.is_apple_silicon else 4,
                "num_workers": "auto",
                "memory_optimization": True
            },
            "paths": {
                "python_audio_dataset": "Python_Audio_dataset/dataset",
                "audioopt_dataset": "AudioOpt/dataset", 
                "shared_dataset": "shared_dataset",
                "models": "AudioOpt/models",
                "output": "AudioOpt/output"
            }
        }
        
        # Apple SiliconÁâπÂåñË®≠ÂÆö
        if self.is_apple_silicon:
            config["apple_silicon"] = {
                "mps_acceleration": True,
                "memory_limit": "32GB",
                "high_performance_mode": True,
                "core_audio_integration": True
            }
        
        # Ë®≠ÂÆö„Éï„Ç°„Ç§„É´‰øùÂ≠ò
        config_path = self.project_root / "config" / "macos_config.json"
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        self.log(f"Ë®≠ÂÆö„Éï„Ç°„Ç§„É´‰ΩúÊàê: {config_path}", "SUCCESS")
        return config_path
    
    def create_launch_scripts(self):
        """macOSÁî®Ëµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà‰ΩúÊàê"""
        self.log("Ëµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà„Çí‰ΩúÊàê‰∏≠...")
        
        # Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†Ëµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà
        launch_script = '''#!/bin/bash
# Audio Pipeline Integrated macOSËµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà

# condaÁí∞Â¢ÉÁ¢∫Ë™ç„Éª„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Éà
if command -v conda >/dev/null 2>&1; then
    source "$(conda info --base)/etc/profile.d/conda.sh"
    conda activate audio-pipeline
else
    echo "‚ùå conda„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
    exit 1
fi

# macOSË®≠ÂÆöË™≠„ÅøËæº„Åø
export MACOS_CONFIG="config/macos_config.json"

# Apple SiliconÊúÄÈÅ©Âåñ
if [[ $(sysctl -n machdep.cpu.brand_string) == *"Apple"* ]]; then
    export PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0
    echo "üçé Apple SiliconÊúÄÈÅ©ÂåñÊúâÂäπ"
fi

# Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†Ëµ∑Âãï
echo "üéµ Audio Pipeline Integrated Ëµ∑Âãï‰∏≠..."
python integrated_main.py

echo "üëã Audio Pipeline Integrated ÁµÇ‰∫Ü"
'''
        
        launch_path = self.project_root / "launch_macos.sh"
        with open(launch_path, 'w', encoding='utf-8') as f:
            f.write(launch_script)
        
        # ÂÆüË°åÊ®©Èôê‰ªò‰∏é
        os.chmod(launch_path, 0o755)
        
        # Python_Audio_datasetËµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà
        audio_script = '''#!/bin/bash
# Python_Audio_dataset macOSËµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà

source "$(conda info --base)/etc/profile.d/conda.sh"
conda activate audio-pipeline

cd Python_Audio_dataset
echo "üéôÔ∏è Python_Audio_dataset Ëµ∑Âãï‰∏≠..."
python src/main.py
'''
        
        audio_path = self.project_root / "launch_audio_dataset.sh"
        with open(audio_path, 'w', encoding='utf-8') as f:
            f.write(audio_script)
        os.chmod(audio_path, 0o755)
        
        # AudioOptËµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà
        audioopt_script = '''#!/bin/bash
# AudioOpt macOSËµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà

source "$(conda info --base)/etc/profile.d/conda.sh"
conda activate audio-pipeline

cd AudioOpt
echo "ü§ñ AudioOpt Ëµ∑Âãï‰∏≠..."
python main.py
'''
        
        audioopt_path = self.project_root / "launch_audioopt.sh"
        with open(audioopt_path, 'w', encoding='utf-8') as f:
            f.write(audioopt_script)
        os.chmod(audioopt_path, 0o755)
        
        self.log("Ëµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà‰ΩúÊàêÂÆå‰∫Ü", "SUCCESS")
        return [launch_path, audio_path, audioopt_path]
    
    def create_requirements_macos(self):
        """macOSÁî®requirements.txt‰ΩúÊàê"""
        self.log("macOSÁî®requirements.txt„Çí‰ΩúÊàê‰∏≠...")
        
        requirements = [
            "# Audio Pipeline Integrated - macOS Requirements",
            "# Core audio processing",
            "sounddevice>=0.4.4",
            "soundfile>=0.10.0", 
            "librosa>=0.9.0",
            "scipy>=1.9.0",
            "numpy>=1.20.0",
            "",
            "# macOS audio integration",
            "pyaudio>=0.2.11",
            "",
            "# Machine learning",
            "# PyTorch: conda install pytorch torchaudio -c pytorch",
            "",
            "# Visualization",
            "matplotlib>=3.5.0",
            "",
            "# System utilities",
            "psutil>=5.8.0",
            "pathlib2>=2.3.0",
            "",
            "# Development tools",
            "pytest>=6.0.0",
            "black>=22.0.0",
        ]
        
        req_path = self.project_root / "requirements_macos.txt"
        with open(req_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(requirements))
        
        self.log(f"requirements‰ΩúÊàê: {req_path}", "SUCCESS")
        return req_path
    
    def create_gitignore_macos(self):
        """macOSÁî®.gitignoreÊõ¥Êñ∞"""
        self.log("macOSÁî®.gitignoreË®≠ÂÆö...")
        
        macos_ignores = [
            "",
            "# macOS specific",
            ".DS_Store",
            ".AppleDouble",
            ".LSOverride",
            "",
            "# macOS Thumbnails",
            "._*",
            "",
            "# macOS Directories potentially created on remote AFP share",
            ".AppleDB",
            ".AppleDesktop", 
            "Network Trash Folder",
            "Temporary Items",
            ".apdisk",
            "",
            "# Audio files (large)",
            "*.wav",
            "*.mp3",
            "*.m4a",
            "*.aiff",
            "",
            "# Model files (large)",
            "*.pth",
            "*.ckpt",
            "*.pkl",
            "",
            "# Logs",
            "logs/",
            "*.log",
            "",
            "# Config (may contain personal settings)",
            "config/personal_*.json",
        ]
        
        gitignore_path = self.project_root / ".gitignore"
        
        # Êó¢Â≠ò„ÅÆ.gitignore„Å´ËøΩË®ò
        if gitignore_path.exists():
            with open(gitignore_path, 'a', encoding='utf-8') as f:
                f.write('\n'.join(macos_ignores))
        else:
            with open(gitignore_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(macos_ignores))
        
        self.log(".gitignoreÊõ¥Êñ∞ÂÆå‰∫Ü", "SUCCESS")
        return gitignore_path
    
    def setup_test_environment(self):
        """„ÉÜ„Çπ„ÉàÁí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó"""
        self.log("„ÉÜ„Çπ„ÉàÁí∞Â¢É„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó‰∏≠...")
        
        # „ÉÜ„Çπ„ÉàÁî®„Çµ„É≥„Éó„É´„Éï„Ç°„Ç§„É´‰ΩúÊàê
        test_script = '''#!/usr/bin/env python3
"""
macOSÁí∞Â¢É„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà
"""
import platform
import torch
import sounddevice as sd

def test_macos_environment():
    print("üß™ macOSÁí∞Â¢É„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠...")
    
    # „Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±
    print(f"OS: {platform.system()} {platform.release()}")
    print(f"CPU: {platform.processor()}")
    
    # PyTorch MPSÁ¢∫Ë™ç
    if torch.backends.mps.is_available():
        print("‚úÖ PyTorch MPSÂä†ÈÄü: Âà©Áî®ÂèØËÉΩ")
        
        # MPSÊÄßËÉΩ„ÉÜ„Çπ„Éà
        device = torch.device('mps')
        x = torch.randn(1000, 1000, device=device)
        y = torch.mm(x, x)
        print("‚úÖ MPSÂãï‰Ωú„ÉÜ„Çπ„Éà: ÊàêÂäü")
    else:
        print("‚ùå PyTorch MPSÂä†ÈÄü: Âà©Áî®‰∏çÂèØ")
    
    # Èü≥Â£∞„Éá„Éê„Ç§„ÇπÁ¢∫Ë™ç
    print("\\nüéôÔ∏è Èü≥Â£∞„Éá„Éê„Ç§„Çπ:")
    devices = sd.query_devices()
    for i, device in enumerate(devices):
        if device['max_input_channels'] > 0:
            print(f"  ÂÖ•Âäõ {i}: {device['name']}")
    
    print("\\n‚úÖ Áí∞Â¢É„ÉÜ„Çπ„ÉàÂÆå‰∫Ü")

if __name__ == "__main__":
    test_macos_environment()
'''
        
        test_path = self.project_root / "test_macos_environment.py"
        with open(test_path, 'w', encoding='utf-8') as f:
            f.write(test_script)
        
        self.log("„ÉÜ„Çπ„ÉàÁí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü", "SUCCESS")
        return test_path
    
    def create_readme_macos(self):
        """macOSÁî®README‰ΩúÊàê"""
        self.log("macOSÁî®README„Çí‰ΩúÊàê‰∏≠...")
        
        readme_content = f'''# Audio Pipeline Integrated - macOSÁâà

MacBook Pro M4 Pro ÊúÄÈÅ©ÂåñÁâà„ÅÆ Audio Pipeline Integrated „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ

## üöÄ „ÇØ„Ç§„ÉÉ„ÇØ„Çπ„Çø„Éº„Éà

### 1. Áí∞Â¢É„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Éà
```bash
conda activate audio-pipeline
```

### 2. Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†Ëµ∑Âãï
```bash
./launch_macos.sh
```

### 3. ÂÄãÂà•„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ëµ∑Âãï
```bash
# Èå≤Èü≥„Ç∑„Çπ„ÉÜ„É†
./launch_audio_dataset.sh

# Èü≥Â£∞ÂêàÊàê„Ç∑„Çπ„ÉÜ„É†  
./launch_audioopt.sh
```

## üçé macOSÊúÄÈÅ©ÂåñÊ©üËÉΩ

{'### Apple Silicon M4 Pro ÊúÄÈÅ©Âåñ' if self.is_apple_silicon else '### Intel Mac'}
- {'‚úÖ MPS GPUÂä†ÈÄü' if self.is_apple_silicon else '‚úÖ CPUÊúÄÈÅ©Âåñ'}
- ‚úÖ Core AudioÁµ±Âêà
- ‚úÖ 48kHzÈ´òÂìÅË≥™Èå≤Èü≥
- ‚úÖ ‰Ωé„É¨„Ç§„ÉÜ„É≥„Ç∑„ÉºÂá¶ÁêÜ

## üìÅ ÈáçË¶Å„Å™„Éï„Ç°„Ç§„É´

- `config/macos_config.json` - macOSË®≠ÂÆö
- `macos_migration_guide.md` - Ë©≥Á¥∞„Ç¨„Ç§„Éâ
- `macos_audio_setup.py` - Èü≥Â£∞Ë®≠ÂÆö
- `test_macos_environment.py` - Áí∞Â¢É„ÉÜ„Çπ„Éà

## üîß „Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞

### „Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„ÇπÊãíÂê¶
„Ç∑„Çπ„ÉÜ„É†Áí∞Â¢ÉË®≠ÂÆö ‚Üí „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Å®„Éó„É©„Ç§„Éê„Ç∑„Éº ‚Üí „Éû„Ç§„ÇØ
„Åß„ÄÅTerminal„Åæ„Åü„ÅØ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíË®±ÂèØ

### Èü≥Â£∞„Éá„Éê„Ç§„ÇπÂïèÈ°å
```bash
python macos_audio_setup.py
```

### Áí∞Â¢É„ÉÜ„Çπ„Éà
```bash
python test_macos_environment.py
```

## üìä ÊÄßËÉΩ„Éô„É≥„ÉÅ„Éû„Éº„ÇØ

{'M4 Pro + 48GB „É°„É¢„É™„Åß„ÅÆÊúüÂæÖÊÄßËÉΩ:' if self.is_apple_silicon else 'Intel Mac „Åß„ÅÆÊúüÂæÖÊÄßËÉΩ:'}
- Èå≤Èü≥: „É™„Ç¢„É´„Çø„Ç§„É†Âá¶ÁêÜ
- ÂâçÂá¶ÁêÜ: 10ÂàÜÈü≥Â£∞ ‚Üí 30ÁßíÂá¶ÁêÜ  
- Â≠¶Áøí: 100„Ç®„Éù„ÉÉ„ÇØ ‚Üí {'15ÂàÜ' if self.is_apple_silicon else '45ÂàÜ'}
- Èü≥Â£∞ÂêàÊàê: 1Êñá ‚Üí {'2Áßí' if self.is_apple_silicon else '5Áßí'}

---

üéµ **MacBook Pro „ÅßÊúÄÈ´òÂìÅË≥™„ÅÆÈü≥Â£∞Âá¶ÁêÜ„Çí„ÅäÊ•Ω„Åó„Åø„Åè„Å†„Åï„ÅÑÔºÅ**
'''
        
        readme_path = self.project_root / "README_macOS.md"
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        self.log("macOSÁî®README‰ΩúÊàêÂÆå‰∫Ü", "SUCCESS")
        return readme_path
    
    def save_setup_log(self):
        """„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„É≠„Ç∞‰øùÂ≠ò"""
        log_dir = self.project_root / "logs"
        log_dir.mkdir(exist_ok=True)
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_path = log_dir / f"macos_setup_{timestamp}.log"
        
        with open(log_path, 'w', encoding='utf-8') as f:
            f.write("Audio Pipeline Integrated - macOS Setup Log\\n")
            f.write("=" * 50 + "\\n")
            for entry in self.setup_log:
                f.write(entry + "\\n")
        
        self.log(f"„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„É≠„Ç∞‰øùÂ≠ò: {log_path}", "SUCCESS")
        return log_path
    
    def run_setup(self):
        """„É°„Ç§„É≥„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆüË°å"""
        self.log("üçé macOSÁî® Audio Pipeline Integrated „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÈñãÂßã")
        
        try:
            # Âü∫Êú¨„ÉÅ„Çß„ÉÉ„ÇØ
            if not self.check_prerequisites():
                return False
            
            # „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆüË°å
            self.setup_directories()
            config_path = self.create_macos_config()
            scripts = self.create_launch_scripts()
            req_path = self.create_requirements_macos()
            gitignore_path = self.create_gitignore_macos()
            test_path = self.setup_test_environment()
            readme_path = self.create_readme_macos()
            log_path = self.save_setup_log()
            
            # ÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏
            self.log("üéâ macOS„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü!", "SUCCESS")
            self.log("", "INFO")
            self.log("üìã ‰ΩúÊàê„Åï„Çå„Åü„Éï„Ç°„Ç§„É´:", "INFO")
            self.log(f"  ‚Ä¢ {config_path}", "INFO")
            self.log(f"  ‚Ä¢ {req_path}", "INFO") 
            self.log(f"  ‚Ä¢ {readme_path}", "INFO")
            self.log(f"  ‚Ä¢ {test_path}", "INFO")
            self.log("", "INFO")
            self.log("üöÄ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:", "INFO")
            self.log("1. conda activate audio-pipeline", "INFO")
            self.log("2. ./launch_macos.sh", "INFO")
            
            return True
            
        except Exception as e:
            self.log(f"„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Ç®„É©„Éº: {e}", "ERROR")
            return False

def main():
    """„É°„Ç§„É≥Èñ¢Êï∞"""
    setup = MacOSSetup()
    success = setup.run_setup()
    
    if success:
        print("\\nüéµ Audio Pipeline Integrated macOSÁâà„ÅÆÊ∫ñÂÇôÂÆå‰∫Ü!")
        sys.exit(0)
    else:
        print("\\n‚ùå „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
        sys.exit(1)

if __name__ == "__main__":
    main()